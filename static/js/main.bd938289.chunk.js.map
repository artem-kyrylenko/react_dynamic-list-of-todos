{"version":3,"sources":["components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","enum/Status.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoInfo","todo","selectedTodoId","onSelectTodo","id","title","completed","isTodoSelected","className","classNames","type","onClick","TodoList","todos","map","TodoFilter","query","onQueryChange","onQueryReset","selectedFilter","onFilterSelect","value","onChange","event","target","placeholder","style","pointerEvents","length","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Status","TodoModal","onClose","useState","user","setUser","useEffect","userId","href","email","name","App","setTodos","selectedTodo","setSelectedTodo","setQuery","All","filterStatus","setFilterStatus","data","handleSelectingTodo","useCallback","visibleTodos","useMemo","preparedTodos","filter","toLowerCase","includes","Active","Completed","handleFilterSelect","handleQueryChange","queryStr","handleReset","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd938289.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  selectedTodoId?: number;\n  onSelectTodo: (todo: Todo) => void;\n}\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo,\n  selectedTodoId,\n  onSelectTodo,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  const isTodoSelected = (id === selectedTodoId);\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': isTodoSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        <span className=\"icon\">\n          <i className={classNames({\n            'fas fa-check': completed,\n          })}\n          />\n        </span>\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames({\n          'has-text-success': completed,\n          'has-text-danger': !completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onSelectTodo(todo)}\n        >\n          <span className=\"icon\">\n            {isTodoSelected\n              ? <i className=\"far fa-eye-slash\" />\n              : <i className=\"far fa-eye\" />}\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodoId?: number;\n  onSelectTodo: (todo: Todo) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  onSelectTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map((todo) => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n          selectedTodoId={selectedTodoId}\n          onSelectTodo={onSelectTodo}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import React from 'react';\n\ninterface Props {\n  query: string;\n  onQueryChange: (query: string) => void;\n  onQueryReset: () => void;\n  selectedFilter: string;\n  onFilterSelect: (filter: string) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onQueryChange,\n  onQueryReset,\n  selectedFilter,\n  onFilterSelect,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedFilter}\n            onChange={(event) => onFilterSelect(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query.length !== 0 && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onQueryReset}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(500)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\n\ninterface Props {\n  todo: Todo,\n  onClose: () => void,\n}\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (todo.userId) {\n      getUser(todo.userId)\n        .then(setUser);\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name || 'Unknown user'}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Status } from './enum/Status';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [filterStatus, setFilterStatus] = useState<string>(Status.All);\n\n  useEffect(() => {\n    getTodos().then((data) => {\n      setTodos(data);\n    });\n  }, []);\n\n  const handleSelectingTodo = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, []);\n\n  const filterTodos = () => {\n    let preparedTodos = [...todos];\n\n    if (query) {\n      preparedTodos = preparedTodos.filter((todo) => (\n        todo.title.toLowerCase().includes(query.toLowerCase())\n      ));\n    }\n\n    switch (filterStatus) {\n      case Status.Active:\n        preparedTodos = preparedTodos.filter((todo) => !todo.completed);\n        break;\n\n      case Status.Completed:\n        preparedTodos = preparedTodos.filter((todo) => todo.completed);\n        break;\n\n      case Status.All:\n      default:\n        return preparedTodos;\n    }\n\n    return preparedTodos;\n  };\n\n  const visibleTodos = useMemo(filterTodos, [todos, filterStatus, query]);\n\n  const handleFilterSelect = useCallback((filter: string) => {\n    setFilterStatus(filter);\n  }, []);\n\n  const handleQueryChange = useCallback((queryStr: string) => {\n    setQuery(queryStr);\n  }, []);\n\n  const handleReset = useCallback(() => {\n    setQuery('');\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedFilter={filterStatus}\n                onFilterSelect={handleFilterSelect}\n                onQueryChange={handleQueryChange}\n                onQueryReset={handleReset}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodoId={selectedTodo?.id}\n                    onSelectTodo={handleSelectingTodo}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={() => setSelectedTodo(null)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}